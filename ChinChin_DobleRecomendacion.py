
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Chin Chin: Recomendador de vinos con doble recomendaci√≥n por plato.
"""

import streamlit as st

# Funci√≥n principal de recomendaci√≥n con dos vinos por plato
def recomendar_vino(plato, edad, genero, region_favorita):
    if edad < 18:
        return {"mensaje": "Est√° prohibida la venta de alcohol en Espa√±a a menores de 18 a√±os."}, 0

    vinos_por_plato = {
        "Gazpacho andaluz": {
            "vinos": [
                {
                    "vino": "Pazo de Se√±or√°ns Albari√±o - R√≠as Baixas (Espa√±a)",
                    "uva": "Albari√±o",
                    "cosecha": "2020",
                    "region": "R√≠as Baixas, Galicia",
                    "copa": 3.5,
                    "botella": 25.0,
                    "calidad": "Est√°ndar",
                    "explicacion": "Fresco y afrutado, complementa la acidez del gazpacho y realza los sabores de los tomates y pepinos."
                },
                {
                    "vino": "Do Ferreiro Cepas Vellas - R√≠as Baixas (Espa√±a)",
                    "uva": "Albari√±o",
                    "cosecha": "2019",
                    "region": "R√≠as Baixas, Galicia",
                    "copa": 6.0,
                    "botella": 45.0,
                    "calidad": "Alta gama",
                    "explicacion": "Un albari√±o complejo y mineral, ideal para sofisticar un plato fresco como el gazpacho."
                }
            ]
        },
        "Tortilla espa√±ola": {
            "vinos": [
                {
                    "vino": "Marqu√©s de Murrieta Rioja Reserva - Rioja (Espa√±a)",
                    "uva": "Tempranillo, Mazuelo, Graciano",
                    "cosecha": "2018",
                    "region": "Rioja, La Rioja",
                    "copa": 5.0,
                    "botella": 35.0,
                    "calidad": "Est√°ndar",
                    "explicacion": "Con cuerpo, armoniza bien con la textura de la tortilla y realza el sabor del huevo y la patata."
                },
                {
                    "vino": "La Rioja Alta Gran Reserva 904 - Rioja (Espa√±a)",
                    "uva": "Tempranillo, Graciano",
                    "cosecha": "2011",
                    "region": "Rioja, La Rioja",
                    "copa": 7.5,
                    "botella": 60.0,
                    "calidad": "Alta gama",
                    "explicacion": "Un cl√°sico elegante con notas complejas que enriquece la experiencia del plato tradicional."
                }
            ]
        }
    }

    recomendacion = vinos_por_plato.get(plato)
    if recomendacion:
        return recomendacion["vinos"], 1
    else:
        return {"mensaje": "No se encontr√≥ una recomendaci√≥n para el plato seleccionado."}, 0

# Interfaz Streamlit
st.title("üç∑ Chin Chin: Tu Sumiller Virtual")
st.subheader("Recomendaci√≥n doble de vinos seg√∫n tu plato y preferencias")

with st.form("formulario_usuario"):
    nombre = st.text_input("¬øCu√°l es tu nombre?")
    edad = st.number_input("¬øQu√© edad tienes?", min_value=0, step=1)
    genero = st.selectbox("¬øCu√°l es tu g√©nero?", ["Prefiero no decirlo", "Femenino", "Masculino", "Otro"])
    region_favorita = st.text_input("¬øCu√°l es tu regi√≥n vitivin√≠cola favorita?")
    plato = st.selectbox("Selecciona un plato", ["Gazpacho andaluz", "Tortilla espa√±ola"])
    enviar = st.form_submit_button("Recomendar vino")

if enviar:
    resultado, exito = recomendar_vino(plato, edad, genero, region_favorita)
    if exito:
        st.success(f"üç∑ Recomendaciones para {nombre} ({plato}):")
        for vino in resultado:
            st.write(f"### üè∑Ô∏è {vino['calidad']} - {vino['vino']}")
            st.write(f"- **Uva:** {vino['uva']}")
            st.write(f"- **Cosecha:** {vino['cosecha']}")
            st.write(f"- **Regi√≥n:** {vino['region']}")
            st.write(f"- **Precio por copa:** {vino['copa']}‚Ç¨")
            st.write(f"- **Precio por botella:** {vino['botella']}‚Ç¨")
            st.write(f"- **¬øPor qu√© este vino?:** {vino['explicacion']}")
            st.markdown("---")
    else:
        st.warning(resultado["mensaje"])
